{"ast":null,"code":"import _classCallCheck from \"/home/amil/virufy-demo.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/amil/virufy-demo.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/amil/virufy-demo.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/amil/virufy-demo.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _regeneratorRuntime from \"/home/amil/virufy-demo.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/amil/virufy-demo.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { copyResponse } from 'workbox-core/copyResponse.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from 'workbox-strategies/Strategy.js';\nimport './_version.js';\nvar copyRedirectedCacheableResponsesPlugin = {\n  cacheWillUpdate: function cacheWillUpdate(_ref) {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              response = _ref.response;\n\n              if (!response.redirected) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 4;\n              return copyResponse(response);\n\n            case 4:\n              _context.t0 = _context.sent;\n              _context.next = 8;\n              break;\n\n            case 7:\n              _context.t0 = response;\n\n            case 8:\n              return _context.abrupt(\"return\", _context.t0);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n};\n/**\n * A [Strategy]{@link module:workbox-strategies.Strategy} implementation\n * specifically designed to work with\n * [PrecacheController]{@link module:workbox-precaching.PrecacheController}\n * to both cache and fetch precached assets.\n *\n * Note: an instance of this class is created automatically when creating a\n * `PrecacheController`; it's generally not necessary to create this yourself.\n *\n * @extends module:workbox-strategies.Strategy\n * @memberof module:workbox-precaching\n */\n\nvar PrecacheStrategy = /*#__PURE__*/function (_Strategy) {\n  _inherits(PrecacheStrategy, _Strategy);\n\n  var _super = _createSuper(PrecacheStrategy);\n\n  /**\n   *\n   * @param {Object} [options]\n   * @param {string} [options.cacheName] Cache name to store and retrieve\n   * requests. Defaults to the cache names provided by\n   * [workbox-core]{@link module:workbox-core.cacheNames}.\n   * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n   * to use in conjunction with this caching strategy.\n   * @param {Object} [options.fetchOptions] Values passed along to the\n   * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n   * of all fetch() requests made by this strategy.\n   * @param {Object} [options.matchOptions] The\n   * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n   * for any `cache.match()` or `cache.put()` calls made by this strategy.\n   * @param {boolean} [options.fallbackToNetwork=true] Whether to attempt to\n   * get the response from the network if there's a precache miss.\n   */\n  function PrecacheStrategy() {\n    var _this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, PrecacheStrategy);\n\n    options.cacheName = cacheNames.getPrecacheName(options.cacheName);\n    _this = _super.call(this, options);\n    _this._fallbackToNetwork = options.fallbackToNetwork === false ? false : true; // Redirected responses cannot be used to satisfy a navigation request, so\n    // any redirected response must be \"copied\" rather than cloned, so the new\n    // response doesn't contain the `redirected` flag. See:\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=669363&desc=2#c1\n\n    _this.plugins.push(copyRedirectedCacheableResponsesPlugin);\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Request|string} request A request to run this strategy for.\n   * @param {module:workbox-strategies.StrategyHandler} handler The event that\n   *     triggered the request.\n   * @return {Promise<Response>}\n   */\n\n\n  _createClass(PrecacheStrategy, [{\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request, handler) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return handler.cacheMatch(request);\n\n              case 2:\n                response = _context2.sent;\n\n                if (response) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                if (!(handler.event && handler.event.type === 'install')) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                _context2.next = 7;\n                return this._handleInstall(request, handler);\n\n              case 7:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 8:\n                _context2.next = 10;\n                return this._handleFetch(request, handler);\n\n              case 10:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 11:\n                return _context2.abrupt(\"return\", response);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _handle(_x, _x2) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n  }, {\n    key: \"_handleFetch\",\n    value: function () {\n      var _handleFetch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(request, handler) {\n        var response, cacheKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this._fallbackToNetwork) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                if (process.env.NODE_ENV !== 'production') {\n                  logger.warn(\"The precached response for \" + \"\".concat(getFriendlyURL(request.url), \" in \").concat(this.cacheName, \" was not \") + \"found. Falling back to the network instead.\");\n                }\n\n                _context3.next = 4;\n                return handler.fetch(request);\n\n              case 4:\n                response = _context3.sent;\n                _context3.next = 8;\n                break;\n\n              case 7:\n                throw new WorkboxError('missing-precache-entry', {\n                  cacheName: this.cacheName,\n                  url: request.url\n                });\n\n              case 8:\n                if (!(process.env.NODE_ENV !== 'production')) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                _context3.t0 = handler.params && handler.params.cacheKey;\n\n                if (_context3.t0) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                _context3.next = 13;\n                return handler.getCacheKey(request, 'read');\n\n              case 13:\n                _context3.t0 = _context3.sent;\n\n              case 14:\n                cacheKey = _context3.t0;\n                // Workbox is going to handle the route.\n                // print the routing details to the console.\n                logger.groupCollapsed(\"Precaching is responding to: \" + getFriendlyURL(request.url));\n                logger.log(\"Serving the precached url: \".concat(getFriendlyURL(cacheKey.url)));\n                logger.groupCollapsed(\"View request details here.\");\n                logger.log(request);\n                logger.groupEnd();\n                logger.groupCollapsed(\"View response details here.\");\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n\n              case 24:\n                return _context3.abrupt(\"return\", response);\n\n              case 25:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _handleFetch(_x3, _x4) {\n        return _handleFetch2.apply(this, arguments);\n      }\n\n      return _handleFetch;\n    }()\n  }, {\n    key: \"_handleInstall\",\n    value: function () {\n      var _handleInstall2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, handler) {\n        var response, responseSafeToPrecache;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return handler.fetchAndCachePut(request);\n\n              case 2:\n                response = _context4.sent;\n                // Any time there's no response, consider it a precaching error.\n                responseSafeToPrecache = Boolean(response); // Also consider it an error if the user didn't pass their own\n                // cacheWillUpdate plugin, and the response is a 400+ (note: this means\n                // that by default opaque responses can be precached).\n\n                if (response && response.status >= 400 && !this._usesCustomCacheableResponseLogic()) {\n                  responseSafeToPrecache = false;\n                }\n\n                if (responseSafeToPrecache) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                throw new WorkboxError('bad-precaching-response', {\n                  url: request.url,\n                  status: response.status\n                });\n\n              case 7:\n                return _context4.abrupt(\"return\", response);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _handleInstall(_x5, _x6) {\n        return _handleInstall2.apply(this, arguments);\n      }\n\n      return _handleInstall;\n    }()\n    /**\n     * Returns true if any users plugins were added containing their own\n     * `cacheWillUpdate` callback.\n     *\n     * This method indicates whether the default cacheable response logic (i.e.\n     * <400, including opaque responses) should be used. If a custom plugin\n     * with a `cacheWillUpdate` callback is passed, then the strategy should\n     * defer to that plugin's logic.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_usesCustomCacheableResponseLogic\",\n    value: function _usesCustomCacheableResponseLogic() {\n      return this.plugins.some(function (plugin) {\n        return plugin.cacheWillUpdate && plugin !== copyRedirectedCacheableResponsesPlugin;\n      });\n    }\n  }]);\n\n  return PrecacheStrategy;\n}(Strategy);\n\nexport { PrecacheStrategy };","map":null,"metadata":{},"sourceType":"module"}