{"ast":null,"code":"/* eslint-disable func-names */ // import 'babel-polyfill'\n// import lamejs from 'lamejs';\nexport default function(){// Note that relative paths don't work when loaded as a blob\n// https://stackoverflow.com/questions/22172426/using-importsscripts-within-blob-in-a-karma-environment\n// importScripts('https://localhost:8443/workers/encoders/lame.js') // eslint-disable-line\nvar channels=1;// 1 for mono or 2 for stereo\n// let sampleRate = 44100 // 44.1khz (normal mp3 samplerate)\nvar kbps=128;// encode 128kbps mp3\nvar mp3encoder=null;var maxSamples=1152;var mp3Data=[];// array of Uint8Array\nfunction init(opts){/* global lamejs */importScripts(opts.baseUrl+'/workers/encoders/lame.min.js');// eslint-disable-line\nmp3encoder=new lamejs.Mp3Encoder(channels,opts.sampleRate,kbps);}function floatTo16BitPCM(input,output){for(var i=0;i<input.length;i+=1){var s=Math.max(-1,Math.min(1,input[i]));// eslint-disable-next-line no-param-reassign\noutput[i]=s<0?s*0x8000:s*0x7FFF;}}function convertBuffer(arrayBuffer){var data=new Float32Array(arrayBuffer);var out=new Int16Array(arrayBuffer.length);floatTo16BitPCM(data,out);return out;}function encode(arrayBuffer){var samplesMono=convertBuffer(arrayBuffer);var remaining=samplesMono.length;for(var i=0;remaining>=0;i+=maxSamples){var left=samplesMono.subarray(i,i+maxSamples);var data=mp3encoder.encodeBuffer(left);mp3Data.push(data);remaining-=maxSamples;}// var mp3buf = mp3encoder.encodeBuffer(buffer)\n// if (mp3buf.length > 0) {\n//   mp3Data.push(mp3buf)\n// }\n}function dump(){var mp3buf=mp3encoder.flush();if(mp3buf.length>0){mp3Data.push(mp3buf);}// Probably results in native memory copy\npostMessage(mp3Data);// Would like to do this, but not possible because mp3Data is generic array of Uint8Array, and generic\n// arrays are not transferrable types.\n// postMessage(mp3Data, [mp3Data])\n// This might help if/when ever become available again\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer\n// For now, though, we have not other option except to build a complete copy in javascript. This means\n// we temporarily require twice the memory of whatever was recorded.\nmp3Data=[];}onmessage=function onmessage(e){if(e.data[0]==='encode'){encode(e.data[1]);}else if(e.data[0]==='dump'){dump(e.data[1]);}else if(e.data[0]==='init'){init(e.data[1]);}else if(e.data[0]==='close'){this.close();}};}","map":{"version":3,"sources":["/Users/arcsec/Documents/Virufy/virufy-demo.github.io/src/helper/audio/encoder-mp3-worker.js"],"names":["channels","kbps","mp3encoder","maxSamples","mp3Data","init","opts","importScripts","baseUrl","lamejs","Mp3Encoder","sampleRate","floatTo16BitPCM","input","output","i","length","s","Math","max","min","convertBuffer","arrayBuffer","data","Float32Array","out","Int16Array","encode","samplesMono","remaining","left","subarray","encodeBuffer","push","dump","mp3buf","flush","postMessage","onmessage","e","close"],"mappings":"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","sourcesContent":["/* eslint-disable func-names */\n// import 'babel-polyfill'\n// import lamejs from 'lamejs';\n\nexport default function () {\n  // Note that relative paths don't work when loaded as a blob\n  // https://stackoverflow.com/questions/22172426/using-importsscripts-within-blob-in-a-karma-environment\n  // importScripts('https://localhost:8443/workers/encoders/lame.js') // eslint-disable-line\n\n  const channels = 1; // 1 for mono or 2 for stereo\n  // let sampleRate = 44100 // 44.1khz (normal mp3 samplerate)\n  const kbps = 128; // encode 128kbps mp3\n\n  let mp3encoder = null;\n\n  const maxSamples = 1152;\n\n  let mp3Data = []; // array of Uint8Array\n\n  function init(opts) {\n    /* global lamejs */\n    importScripts(opts.baseUrl + '/workers/encoders/lame.min.js'); // eslint-disable-line\n    mp3encoder = new lamejs.Mp3Encoder(channels, opts.sampleRate, kbps);\n  }\n\n  function floatTo16BitPCM(input, output) {\n    for (let i = 0; i < input.length; i += 1) {\n      const s = Math.max(-1, Math.min(1, input[i]));\n      // eslint-disable-next-line no-param-reassign\n      output[i] = (s < 0 ? s * 0x8000 : s * 0x7FFF);\n    }\n  }\n\n  function convertBuffer(arrayBuffer) {\n    const data = new Float32Array(arrayBuffer);\n    const out = new Int16Array(arrayBuffer.length);\n    floatTo16BitPCM(data, out);\n    return out;\n  }\n\n  function encode(arrayBuffer) {\n    const samplesMono = convertBuffer(arrayBuffer);\n    let remaining = samplesMono.length;\n    for (let i = 0; remaining >= 0; i += maxSamples) {\n      const left = samplesMono.subarray(i, i + maxSamples);\n      const data = mp3encoder.encodeBuffer(left);\n      mp3Data.push(data);\n      remaining -= maxSamples;\n    }\n\n    // var mp3buf = mp3encoder.encodeBuffer(buffer)\n    // if (mp3buf.length > 0) {\n    //   mp3Data.push(mp3buf)\n    // }\n  }\n\n  function dump() {\n    const mp3buf = mp3encoder.flush();\n    if (mp3buf.length > 0) {\n      mp3Data.push(mp3buf);\n    }\n\n    // Probably results in native memory copy\n    postMessage(mp3Data);\n\n    // Would like to do this, but not possible because mp3Data is generic array of Uint8Array, and generic\n    // arrays are not transferrable types.\n    // postMessage(mp3Data, [mp3Data])\n\n    // This might help if/when ever become available again\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer\n\n    // For now, though, we have not other option except to build a complete copy in javascript. This means\n    // we temporarily require twice the memory of whatever was recorded.\n\n    mp3Data = [];\n  }\n\n  onmessage = function onmessage(e) {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1]);\n    } else if (e.data[0] === 'dump') {\n      dump(e.data[1]);\n    } else if (e.data[0] === 'init') {\n      init(e.data[1]);\n    } else if (e.data[0] === 'close') {\n      this.close();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}