{"ast":null,"code":"/* eslint-disable no-plusplus */\n\n/* eslint-disable no-param-reassign */\nconst sizeAsHuman = (bytes, si) => {\n  const thresh = si ? 1000 : 1024;\n\n  if (Math.abs(bytes) < thresh) {\n    return `${bytes} B`;\n  }\n\n  const units = si ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'] : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n  let u = -1;\n\n  do {\n    bytes /= thresh;\n    ++u;\n  } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n\n  return `${bytes.toFixed(1)} ${units[u]}`;\n};\n\nconst blobToFile = (theBlob, fileName) => {\n  const b = theBlob; // A Blob() is almost a File() - it's just missing the two properties below which we will add\n\n  b.lastModifiedDate = new Date();\n  b.name = fileName; // Cast to a File() type\n\n  return theBlob;\n};\n\nexport default {\n  sizeAsHuman,\n  blobToFile\n};","map":{"version":3,"sources":["/Users/arcsec/virufy-demo.github.io/src/helper/fileHelper.ts"],"names":["sizeAsHuman","bytes","si","thresh","Math","abs","units","u","length","toFixed","blobToFile","theBlob","fileName","b","lastModifiedDate","Date","name"],"mappings":"AAAA;;AACA;AAEA,MAAMA,WAAW,GAAG,CAACC,KAAD,EAAgBC,EAAhB,KAAiC;AACnD,QAAMC,MAAM,GAAGD,EAAE,GAAG,IAAH,GAAU,IAA3B;;AACA,MAAIE,IAAI,CAACC,GAAL,CAASJ,KAAT,IAAkBE,MAAtB,EAA8B;AAC5B,WAAQ,GAAEF,KAAM,IAAhB;AACD;;AACD,QAAMK,KAAK,GAAGJ,EAAE,GACZ,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,IAA3C,CADY,GAEZ,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,EAAkD,KAAlD,CAFJ;AAGA,MAAIK,CAAC,GAAG,CAAC,CAAT;;AACA,KAAG;AACDN,IAAAA,KAAK,IAAIE,MAAT;AACA,MAAEI,CAAF;AACD,GAHD,QAGSH,IAAI,CAACC,GAAL,CAASJ,KAAT,KAAmBE,MAAnB,IAA6BI,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAHzD;;AAIA,SAAQ,GAAEP,KAAK,CAACQ,OAAN,CAAc,CAAd,CAAiB,IAAGH,KAAK,CAACC,CAAD,CAAI,EAAvC;AACD,CAdD;;AAgBA,MAAMG,UAAU,GAAG,CAACC,OAAD,EAAgBC,QAAhB,KAA0C;AAC3D,QAAMC,CAAM,GAAGF,OAAf,CAD2D,CAE3D;;AACAE,EAAAA,CAAC,CAACC,gBAAF,GAAqB,IAAIC,IAAJ,EAArB;AACAF,EAAAA,CAAC,CAACG,IAAF,GAASJ,QAAT,CAJ2D,CAM3D;;AACA,SAAOD,OAAP;AACD,CARD;;AAUA,eAAe;AACbX,EAAAA,WADa;AAEbU,EAAAA;AAFa,CAAf","sourcesContent":["/* eslint-disable no-plusplus */\n/* eslint-disable no-param-reassign */\n\nconst sizeAsHuman = (bytes: number, si?: boolean) => {\n  const thresh = si ? 1000 : 1024;\n  if (Math.abs(bytes) < thresh) {\n    return `${bytes} B`;\n  }\n  const units = si\n    ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n    : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];\n  let u = -1;\n  do {\n    bytes /= thresh;\n    ++u;\n  } while (Math.abs(bytes) >= thresh && u < units.length - 1);\n  return `${bytes.toFixed(1)} ${units[u]}`;\n};\n\nconst blobToFile = (theBlob: Blob, fileName:string): File => {\n  const b: any = theBlob;\n  // A Blob() is almost a File() - it's just missing the two properties below which we will add\n  b.lastModifiedDate = new Date();\n  b.name = fileName;\n\n  // Cast to a File() type\n  return theBlob as File;\n};\n\nexport default {\n  sizeAsHuman,\n  blobToFile,\n};\n"]},"metadata":{},"sourceType":"module"}