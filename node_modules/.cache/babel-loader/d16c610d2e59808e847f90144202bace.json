{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/arcsec/Documents/Virufy/virufy-demo.github.io/src/containers/SubmitSteps/RecordingsSteps/Introduction/Record/Record.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport usePortal from 'react-useportal';\nimport { useTranslation } from 'react-i18next'; // Form\n\nimport { Controller, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup'; // Components\n\nimport MicRecorder from 'components/MicRecorder';\nimport WizardButtons from 'components/WizardButtons'; // Images\n\nimport UploadSVG from \"assets/icons/upload.svg\"; // Styles\n\nimport { MainContainer, UploadContainer, UploadImage, UploadText, MicContainer } from './style';\nconst audioMaxSizeInMb = 5;\nconst schema = Yup.object({\n  recordingFile: Yup.mixed().required('ERROR.FILE_REQUIRED').test('fileSize', 'ERROR.FILE_SIZE', value => {\n    if (value) {\n      const file = value;\n      const {\n        size\n      } = file;\n      return size <= 1024 ** 3 * audioMaxSizeInMb;\n    }\n\n    return !!value;\n  }).test('fileDuration', 'ERROR.FILE_DURATION', async value => {\n    if (value) {\n      const file = value;\n      const audio = new Audio(URL.createObjectURL(file));\n      audio.load();\n      await new Promise(resolver => audio.addEventListener('loadedmetadata', resolver));\n      const duration = await new Promise(resolver => {\n        if (audio.duration !== Infinity) {\n          resolver(audio.duration);\n        }\n\n        audio.addEventListener('durationchange', () => {\n          audio.remove();\n          resolver(audio.duration);\n        });\n        audio.volume = 0;\n        audio.currentTime = 24 * 60 * 60; // Unprobable time\n\n        audio.play();\n      });\n      return duration >= 2;\n    }\n\n    return !!value;\n  })\n}).defined();\n\nconst Record = ({\n  onNext,\n  onManualUpload,\n  defaultValues,\n  currentLogic,\n  action\n}) => {\n  _s();\n\n  // Hooks\n  const {\n    Portal\n  } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons')\n  });\n  const {\n    handleSubmit,\n    control,\n    getValues,\n    formState\n  } = useForm({\n    mode: 'onChange',\n    defaultValues,\n    resolver: yupResolver(schema)\n  });\n  const {\n    t\n  } = useTranslation();\n  const {\n    isValid\n  } = formState; // Refs\n\n  const micKey = React.useRef(1);\n\n  const onManualUploadWithFile = () => {\n    action({\n      [currentLogic]: {\n        recordingFile: getValues('recordingFile') || null,\n        uploadedFile: null\n      }\n    });\n    onManualUpload === null || onManualUpload === void 0 ? void 0 : onManualUpload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(MainContainer, {\n      children: [/*#__PURE__*/_jsxDEV(MicContainer, {\n        children: /*#__PURE__*/_jsxDEV(Controller, {\n          control: control,\n          name: \"recordingFile\",\n          render: ({\n            onChange\n          }) => /*#__PURE__*/_jsxDEV(MicRecorder, {\n            // On delete, easy re-mount a new mic recorder\n            onNewRecord: onChange,\n            recordingFile: defaultValues === null || defaultValues === void 0 ? void 0 : defaultValues.recordingFile\n          }, micKey.current, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Portal, {\n        children: [/*#__PURE__*/_jsxDEV(WizardButtons, {\n          invert: true,\n          leftLabel: t('recordingsRecord:next'),\n          leftDisabled: !isValid,\n          leftHandler: handleSubmit(onNext)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UploadContainer, {\n          onClick: onManualUploadWithFile,\n          children: [/*#__PURE__*/_jsxDEV(UploadImage, {\n            src: UploadSVG\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(UploadText, {\n            children: t('recordingsRecord:upload')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Record, \"/238qRdsE/3OV/AFplGhCoq2+rY=\", false, function () {\n  return [usePortal, useForm, useTranslation];\n});\n\n_c = Record;\nexport default _c2 = /*#__PURE__*/React.memo(Record);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Record\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/arcsec/Documents/Virufy/virufy-demo.github.io/src/containers/SubmitSteps/RecordingsSteps/Introduction/Record/Record.tsx"],"names":["React","usePortal","useTranslation","Controller","useForm","yupResolver","Yup","MicRecorder","WizardButtons","MainContainer","UploadContainer","UploadImage","UploadText","MicContainer","audioMaxSizeInMb","schema","object","recordingFile","mixed","required","test","value","file","size","audio","Audio","URL","createObjectURL","load","Promise","resolver","addEventListener","duration","Infinity","remove","volume","currentTime","play","defined","Record","onNext","onManualUpload","defaultValues","currentLogic","action","Portal","bindTo","document","getElementById","handleSubmit","control","getValues","formState","mode","t","isValid","micKey","useRef","onManualUploadWithFile","uploadedFile","onChange","current","UploadSVG","memo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport usePortal from 'react-useportal';\nimport { useTranslation } from 'react-i18next';\n\n// Form\nimport { Controller, useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n\n// Components\nimport MicRecorder from 'components/MicRecorder';\nimport WizardButtons from 'components/WizardButtons';\n\n// Images\nimport UploadSVG from 'assets/icons/upload.svg';\n\n// Styles\nimport {\n  MainContainer,\n  UploadContainer,\n  UploadImage,\n  UploadText,\n  MicContainer,\n} from './style';\n\nconst audioMaxSizeInMb = 5;\n\nconst schema = Yup.object({\n  recordingFile: Yup.mixed()\n    .required('ERROR.FILE_REQUIRED')\n    .test('fileSize', 'ERROR.FILE_SIZE', (value?: any) => {\n      if (value) {\n        const file = value as File;\n        const { size } = file;\n        return (size <= 1024 ** 3 * audioMaxSizeInMb);\n      }\n      return !!value;\n    })\n    .test('fileDuration', 'ERROR.FILE_DURATION', async (value?: any) => {\n      if (value) {\n        const file = value as File;\n        const audio = new Audio(URL.createObjectURL(file));\n        audio.load();\n        await new Promise(resolver => audio.addEventListener('loadedmetadata', resolver));\n        const duration: number = await new Promise(resolver => {\n          if (audio.duration !== Infinity) {\n            resolver(audio.duration);\n          }\n          audio.addEventListener('durationchange', () => {\n            audio.remove();\n            resolver(audio.duration);\n          });\n          audio.volume = 0;\n          audio.currentTime = 24 * 60 * 60; // Unprobable time\n          audio.play();\n        });\n        return (duration >= 2);\n      }\n      return !!value;\n    }),\n}).defined();\n\nexport type RecordType = Yup.InferType<typeof schema>;\n\ninterface RecordProps {\n  onNext: (values: RecordType) => void,\n  onManualUpload: () => void,\n  defaultValues: RecordType,\n  currentLogic: string,\n  action:any,\n}\n\nconst Record = ({\n  onNext,\n  onManualUpload,\n  defaultValues,\n  currentLogic,\n  action,\n}: RecordProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo:\n      document && (document.getElementById('wizard-buttons') as HTMLDivElement),\n  });\n  const {\n    handleSubmit, control, getValues, formState,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues,\n    resolver: yupResolver(schema),\n  });\n  const { t } = useTranslation();\n\n  const { isValid } = formState;\n\n  // Refs\n  const micKey = React.useRef<number>(1);\n\n  const onManualUploadWithFile = () => {\n    action({\n      [currentLogic]: {\n        recordingFile: getValues('recordingFile') || null,\n        uploadedFile: null,\n      },\n    });\n    onManualUpload?.();\n  };\n\n  return (\n    <>\n      <MainContainer>\n        <MicContainer>\n          <Controller\n            control={control}\n            name=\"recordingFile\"\n            render={({ onChange }) => (\n              <MicRecorder\n                key={micKey.current} // On delete, easy re-mount a new mic recorder\n                onNewRecord={onChange}\n                recordingFile={defaultValues?.recordingFile}\n              />\n            )}\n          />\n        </MicContainer>\n\n        <Portal>\n          <WizardButtons\n            invert\n            leftLabel={t('recordingsRecord:next')}\n            leftDisabled={!isValid}\n            leftHandler={handleSubmit(onNext)}\n          />\n          {/* Upload Container */}\n          <UploadContainer onClick={onManualUploadWithFile}>\n            <UploadImage src={UploadSVG} />\n            <UploadText>{t('recordingsRecord:upload')}</UploadText>\n          </UploadContainer>\n        </Portal>\n      </MainContainer>\n    </>\n  );\n};\n\nexport default React.memo(Record);\n"]},"metadata":{},"sourceType":"module"}