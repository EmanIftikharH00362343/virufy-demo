{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar Device;\n\n(function (Device) {\n  Device[\"Browser\"] = \"browser\";\n  Device[\"Server\"] = \"server\";\n  Device[\"Native\"] = \"native\";\n})(Device = exports.Device || (exports.Device = {}));\n\nvar Browser = Device.Browser,\n    Server = Device.Server,\n    Native = Device.Native;\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nvar canUseNative = typeof navigator != 'undefined' && navigator.product == 'ReactNative';\nvar device = canUseNative ? Native : canUseDOM ? Browser : Server;\nvar SSRObject = {\n  isBrowser: device === Browser,\n  isServer: device === Server,\n  isNative: device === Native,\n  device: device,\n  canUseWorkers: typeof Worker !== 'undefined',\n  canUseEventListeners: device === Browser && !!window.addEventListener,\n  canUseViewport: device === Browser && !!window.screen\n}; // TODO: instead of this, do a polyfill for `Object.assign` https://www.npmjs.com/package/es6-object-assign\n\nvar assign = function assign() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return args.reduce(function (acc, obj) {\n    return __assign(__assign({}, acc), obj);\n  }, {});\n};\n\nvar values = function values(obj) {\n  return Object.keys(obj).map(function (key) {\n    return obj[key];\n  });\n};\n\nvar toArrayObject = function toArrayObject() {\n  return assign((values(SSRObject), SSRObject));\n};\n\nvar useSSRObject = toArrayObject();\n\nexports.weAreServer = function () {\n  SSRObject.isServer = true;\n  useSSRObject = toArrayObject();\n};\n\nexports.useSSR = function () {\n  return useSSRObject;\n};\n\nexports.default = exports.useSSR;","map":null,"metadata":{},"sourceType":"script"}