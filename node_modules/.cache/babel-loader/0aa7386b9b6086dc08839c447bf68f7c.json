{"ast":null,"code":"/* eslint-disable func-names */\n// import 'babel-polyfill'\n// import lamejs from 'lamejs';\nexport default function () {\n  // Note that relative paths don't work when loaded as a blob\n  // https://stackoverflow.com/questions/22172426/using-importsscripts-within-blob-in-a-karma-environment\n  // importScripts('https://localhost:8443/workers/encoders/lame.js') // eslint-disable-line\n  const channels = 1; // 1 for mono or 2 for stereo\n  // let sampleRate = 44100 // 44.1khz (normal mp3 samplerate)\n\n  const kbps = 128; // encode 128kbps mp3\n\n  let mp3encoder = null;\n  const maxSamples = 1152;\n  let mp3Data = []; // array of Uint8Array\n\n  function init(opts) {\n    /* global lamejs */\n    importScripts(opts.baseUrl + '/workers/encoders/lame.min.js'); // eslint-disable-line\n\n    mp3encoder = new lamejs.Mp3Encoder(channels, opts.sampleRate, kbps);\n  }\n\n  function floatTo16BitPCM(input, output) {\n    for (let i = 0; i < input.length; i += 1) {\n      const s = Math.max(-1, Math.min(1, input[i])); // eslint-disable-next-line no-param-reassign\n\n      output[i] = s < 0 ? s * 0x8000 : s * 0x7FFF;\n    }\n  }\n\n  function convertBuffer(arrayBuffer) {\n    const data = new Float32Array(arrayBuffer);\n    const out = new Int16Array(arrayBuffer.length);\n    floatTo16BitPCM(data, out);\n    return out;\n  }\n\n  function encode(arrayBuffer) {\n    const samplesMono = convertBuffer(arrayBuffer);\n    let remaining = samplesMono.length;\n\n    for (let i = 0; remaining >= 0; i += maxSamples) {\n      const left = samplesMono.subarray(i, i + maxSamples);\n      const data = mp3encoder.encodeBuffer(left);\n      mp3Data.push(data);\n      remaining -= maxSamples;\n    } // var mp3buf = mp3encoder.encodeBuffer(buffer)\n    // if (mp3buf.length > 0) {\n    //   mp3Data.push(mp3buf)\n    // }\n\n  }\n\n  function dump() {\n    const mp3buf = mp3encoder.flush();\n\n    if (mp3buf.length > 0) {\n      mp3Data.push(mp3buf);\n    } // Probably results in native memory copy\n\n\n    postMessage(mp3Data); // Would like to do this, but not possible because mp3Data is generic array of Uint8Array, and generic\n    // arrays are not transferrable types.\n    // postMessage(mp3Data, [mp3Data])\n    // This might help if/when ever become available again\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer\n    // For now, though, we have not other option except to build a complete copy in javascript. This means\n    // we temporarily require twice the memory of whatever was recorded.\n\n    mp3Data = [];\n  }\n\n  onmessage = function onmessage(e) {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1]);\n    } else if (e.data[0] === 'dump') {\n      dump(e.data[1]);\n    } else if (e.data[0] === 'init') {\n      init(e.data[1]);\n    } else if (e.data[0] === 'close') {\n      this.close();\n    }\n  };\n}","map":{"version":3,"sources":["/Users/arcsec/Documents/Virufy/virufy-demo.github.io/src/helper/audio/encoder-mp3-worker.js"],"names":["channels","kbps","mp3encoder","maxSamples","mp3Data","init","opts","importScripts","baseUrl","lamejs","Mp3Encoder","sampleRate","floatTo16BitPCM","input","output","i","length","s","Math","max","min","convertBuffer","arrayBuffer","data","Float32Array","out","Int16Array","encode","samplesMono","remaining","left","subarray","encodeBuffer","push","dump","mp3buf","flush","postMessage","onmessage","e","close"],"mappings":"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","sourcesContent":["/* eslint-disable func-names */\n// import 'babel-polyfill'\n// import lamejs from 'lamejs';\n\nexport default function () {\n  // Note that relative paths don't work when loaded as a blob\n  // https://stackoverflow.com/questions/22172426/using-importsscripts-within-blob-in-a-karma-environment\n  // importScripts('https://localhost:8443/workers/encoders/lame.js') // eslint-disable-line\n\n  const channels = 1; // 1 for mono or 2 for stereo\n  // let sampleRate = 44100 // 44.1khz (normal mp3 samplerate)\n  const kbps = 128; // encode 128kbps mp3\n\n  let mp3encoder = null;\n\n  const maxSamples = 1152;\n\n  let mp3Data = []; // array of Uint8Array\n\n  function init(opts) {\n    /* global lamejs */\n    importScripts(opts.baseUrl + '/workers/encoders/lame.min.js'); // eslint-disable-line\n    mp3encoder = new lamejs.Mp3Encoder(channels, opts.sampleRate, kbps);\n  }\n\n  function floatTo16BitPCM(input, output) {\n    for (let i = 0; i < input.length; i += 1) {\n      const s = Math.max(-1, Math.min(1, input[i]));\n      // eslint-disable-next-line no-param-reassign\n      output[i] = (s < 0 ? s * 0x8000 : s * 0x7FFF);\n    }\n  }\n\n  function convertBuffer(arrayBuffer) {\n    const data = new Float32Array(arrayBuffer);\n    const out = new Int16Array(arrayBuffer.length);\n    floatTo16BitPCM(data, out);\n    return out;\n  }\n\n  function encode(arrayBuffer) {\n    const samplesMono = convertBuffer(arrayBuffer);\n    let remaining = samplesMono.length;\n    for (let i = 0; remaining >= 0; i += maxSamples) {\n      const left = samplesMono.subarray(i, i + maxSamples);\n      const data = mp3encoder.encodeBuffer(left);\n      mp3Data.push(data);\n      remaining -= maxSamples;\n    }\n\n    // var mp3buf = mp3encoder.encodeBuffer(buffer)\n    // if (mp3buf.length > 0) {\n    //   mp3Data.push(mp3buf)\n    // }\n  }\n\n  function dump() {\n    const mp3buf = mp3encoder.flush();\n    if (mp3buf.length > 0) {\n      mp3Data.push(mp3buf);\n    }\n\n    // Probably results in native memory copy\n    postMessage(mp3Data);\n\n    // Would like to do this, but not possible because mp3Data is generic array of Uint8Array, and generic\n    // arrays are not transferrable types.\n    // postMessage(mp3Data, [mp3Data])\n\n    // This might help if/when ever become available again\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/transfer\n\n    // For now, though, we have not other option except to build a complete copy in javascript. This means\n    // we temporarily require twice the memory of whatever was recorded.\n\n    mp3Data = [];\n  }\n\n  onmessage = function onmessage(e) {\n    if (e.data[0] === 'encode') {\n      encode(e.data[1]);\n    } else if (e.data[0] === 'dump') {\n      dump(e.data[1]);\n    } else if (e.data[0] === 'init') {\n      init(e.data[1]);\n    } else if (e.data[0] === 'close') {\n      this.close();\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}