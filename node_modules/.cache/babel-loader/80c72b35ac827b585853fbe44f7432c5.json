{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/arcsec/virufy-demo.github.io/src/containers/SubmitSteps/RecordingsSteps/RecordManualUpload/RecordManualUpload.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation } from 'react-i18next'; // Form\n\nimport { Controller, useForm } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup'; // Components\n\nimport WizardButtons from 'components/WizardButtons'; // Header Control\n\nimport useHeaderContext from 'hooks/useHeaderContext'; // Utils\n\nimport { updateAction } from 'utils/wizard';\nimport { scrollToTop } from 'helper/scrollHelper'; // Styles\n\nimport { MainContainer, Title, TextErrorContainer, UploadContainer, UploadInput, UploadButton, CloudsSVG, ArrowUp } from './style';\nconst audioMaxSizeInMb = 5;\nconst mimeTypes = 'audio/wav,audio/wave,audio/wav,audio/x-wav,audio/x-pn-wav,audio/mp3,audio/ogg';\nconst schema = Yup.object({\n  uploadedFile: Yup.mixed().required('ERROR.FILE_REQUIRED').test('fileSize', 'ERROR.FILE_SIZE', value => {\n    if (value) {\n      const file = value;\n      const {\n        size\n      } = file;\n      return size <= 1024 ** 3 * audioMaxSizeInMb;\n    }\n\n    return !!value;\n  }).test('fileDuration', 'ERROR.FILE_DURATION', async value => {\n    if (value) {\n      const file = value;\n      const audio = new Audio(URL.createObjectURL(file));\n      audio.load();\n      await new Promise(resolver => audio.addEventListener('loadedmetadata', resolver));\n      return audio.duration >= 3;\n    }\n\n    return !!value;\n  })\n}).defined();\n\nconst RecordManualUpload = ({\n  storeKey,\n  previousStep,\n  nextStep,\n  metadata\n}) => {\n  _s();\n\n  var _state$storeKey;\n\n  // Hooks\n  const {\n    Portal\n  } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons')\n  });\n  const {\n    setDoGoBack,\n    setTitle,\n    setSubtitle,\n    setType\n  } = useHeaderContext();\n  const history = useHistory();\n  const {\n    state,\n    actions\n  } = useStateMachine({\n    updateAction: updateAction(storeKey)\n  });\n  const {\n    control\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state === null || state === void 0 ? void 0 : (_state$storeKey = state[storeKey]) === null || _state$storeKey === void 0 ? void 0 : _state$storeKey[metadata === null || metadata === void 0 ? void 0 : metadata.currentLogic],\n    resolver: yupResolver(schema)\n  });\n  const {\n    t\n  } = useTranslation(); // States\n\n  const [activeStep, setActiveStep] = React.useState(true);\n  const [errorMsg, setErrorMsg] = React.useState('');\n  const inputUpload = useRef(null); // Handlers\n\n  const handleNext = React.useCallback(values => {\n    if (nextStep) {\n      actions.updateAction({\n        [metadata === null || metadata === void 0 ? void 0 : metadata.currentLogic]: {\n          recordingFile: null,\n          uploadedFile: values\n        }\n      });\n      setActiveStep(false);\n      history.push(nextStep, {\n        from: 'step-manual-upload'\n      });\n    }\n  }, [nextStep, actions, metadata, history]);\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n  const handleUpload = React.useCallback(e => {\n    schema.validate({\n      uploadedFile: e\n    }).then(() => {\n      handleNext(e);\n    }).catch(err => {\n      if (err.errors[0] === 'ERROR.FILE_SIZE') {\n        setErrorMsg(t('recordingsRecordManual:fileSizeTooBig'));\n      }\n\n      if (err.errors[0] === 'ERROR.FILE_REQUIRED') {\n        setErrorMsg(t('recordingsRecordManual:fileRequired'));\n      } else {\n        setErrorMsg(t('recordingsRecordManual:fileDurationTooShort'));\n      }\n    });\n  }, [handleNext, t]); // Effects\n\n  useEffect(() => {\n    scrollToTop();\n    setTitle(t('recordingsRecordManual:header'));\n    setSubtitle('');\n    setType('shapeUp');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setType, setSubtitle, setTitle, t]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: t('recordingsRecordManual:micError')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CloudsSVG, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        control: control,\n        name: \"uploadedFile\",\n        render: ({\n          name\n        }) => /*#__PURE__*/_jsxDEV(UploadContainer, {\n          children: [/*#__PURE__*/_jsxDEV(UploadButton, {\n            htmlFor: \"uploaded-file\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ArrowUp, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(UploadInput, {\n            ref: inputUpload,\n            id: \"uploaded-file\",\n            type: \"file\",\n            name: name,\n            accept: mimeTypes,\n            onChange: e => {\n              var _e$currentTarget$file;\n\n              return handleUpload((_e$currentTarget$file = e.currentTarget.files) === null || _e$currentTarget$file === void 0 ? void 0 : _e$currentTarget$file[0]);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextErrorContainer, {\n      children: errorMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), activeStep && /*#__PURE__*/_jsxDEV(Portal, {\n      children: /*#__PURE__*/_jsxDEV(WizardButtons, {\n        invert: true,\n        leftLabel: t('recordingsRecordManual:uploadFile'),\n        leftHandler: () => {\n          var _inputUpload$current;\n\n          return (_inputUpload$current = inputUpload.current) === null || _inputUpload$current === void 0 ? void 0 : _inputUpload$current.click();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RecordManualUpload, \"ai5p2k8VJOsVSNq8OeXpjV7Crr0=\", false, function () {\n  return [usePortal, useHeaderContext, useHistory, useStateMachine, useForm, useTranslation];\n});\n\n_c = RecordManualUpload;\nexport default _c2 = /*#__PURE__*/React.memo(RecordManualUpload);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RecordManualUpload\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/arcsec/virufy-demo.github.io/src/containers/SubmitSteps/RecordingsSteps/RecordManualUpload/RecordManualUpload.tsx"],"names":["React","useEffect","useRef","useHistory","usePortal","useTranslation","Controller","useForm","useStateMachine","yupResolver","Yup","WizardButtons","useHeaderContext","updateAction","scrollToTop","MainContainer","Title","TextErrorContainer","UploadContainer","UploadInput","UploadButton","CloudsSVG","ArrowUp","audioMaxSizeInMb","mimeTypes","schema","object","uploadedFile","mixed","required","test","value","file","size","audio","Audio","URL","createObjectURL","load","Promise","resolver","addEventListener","duration","defined","RecordManualUpload","storeKey","previousStep","nextStep","metadata","Portal","bindTo","document","getElementById","setDoGoBack","setTitle","setSubtitle","setType","history","state","actions","control","mode","defaultValues","currentLogic","t","activeStep","setActiveStep","useState","errorMsg","setErrorMsg","inputUpload","handleNext","useCallback","values","recordingFile","push","from","handleDoBack","goBack","handleUpload","e","validate","then","catch","err","errors","name","currentTarget","files","current","click","memo"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport usePortal from 'react-useportal';\nimport { useTranslation } from 'react-i18next';\n\n// Form\nimport { Controller, useForm } from 'react-hook-form';\nimport { useStateMachine } from 'little-state-machine';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as Yup from 'yup';\n\n// Components\nimport WizardButtons from 'components/WizardButtons';\n\n// Header Control\nimport useHeaderContext from 'hooks/useHeaderContext';\n\n// Utils\nimport { updateAction } from 'utils/wizard';\nimport { scrollToTop } from 'helper/scrollHelper';\n\n// Styles\nimport {\n  MainContainer,\n  Title,\n  TextErrorContainer,\n  UploadContainer,\n  UploadInput,\n  UploadButton,\n  CloudsSVG,\n  ArrowUp,\n} from './style';\n\nconst audioMaxSizeInMb = 5;\n\nconst mimeTypes = 'audio/wav,audio/wave,audio/wav,audio/x-wav,audio/x-pn-wav,audio/mp3,audio/ogg';\n\nconst schema = Yup.object({\n  uploadedFile: Yup.mixed()\n    .required('ERROR.FILE_REQUIRED')\n    .test('fileSize', 'ERROR.FILE_SIZE', (value?: any) => {\n      if (value) {\n        const file = value as File;\n        const { size } = file;\n        return size <= ((1024 ** 3) * audioMaxSizeInMb);\n      }\n      return !!value;\n    })\n    .test('fileDuration', 'ERROR.FILE_DURATION', async (value?: any) => {\n      if (value) {\n        const file = value as File;\n        const audio = new Audio(URL.createObjectURL(file));\n\n        audio.load();\n        await new Promise(resolver => audio.addEventListener('loadedmetadata', resolver));\n        return (audio.duration >= 3);\n      }\n      return !!value;\n    }),\n}).defined();\n\nconst RecordManualUpload = ({\n  storeKey,\n  previousStep,\n  nextStep,\n  metadata,\n}: Wizard.StepProps) => {\n  // Hooks\n  const { Portal } = usePortal({\n    bindTo: document && document.getElementById('wizard-buttons') as HTMLDivElement,\n  });\n  const {\n    setDoGoBack, setTitle, setSubtitle, setType,\n  } = useHeaderContext();\n  const history = useHistory();\n  const { state, actions } = useStateMachine({ updateAction: updateAction(storeKey) });\n  const {\n    control,\n  } = useForm({\n    mode: 'onChange',\n    defaultValues: state?.[storeKey]?.[metadata?.currentLogic],\n    resolver: yupResolver(schema),\n  });\n  const { t } = useTranslation();\n\n  // States\n  const [activeStep, setActiveStep] = React.useState(true);\n  const [errorMsg, setErrorMsg] = React.useState('');\n  const inputUpload = useRef<HTMLInputElement>(null);\n\n  // Handlers\n  const handleNext = React.useCallback((values: File) => {\n    if (nextStep) {\n      actions.updateAction({\n        [metadata?.currentLogic]: {\n          recordingFile: null,\n          uploadedFile: values,\n        },\n      });\n      setActiveStep(false);\n      history.push(nextStep, { from: 'step-manual-upload' });\n    }\n  }, [nextStep, actions, metadata, history]);\n\n  const handleDoBack = React.useCallback(() => {\n    setActiveStep(false);\n    if (previousStep) {\n      history.push(previousStep);\n    } else {\n      history.goBack();\n    }\n  }, [history, previousStep]);\n\n  const handleUpload = React.useCallback(e => {\n    schema.validate({ uploadedFile: e }).then(() => {\n      handleNext(e);\n    }).catch(err => {\n      if (err.errors[0] === 'ERROR.FILE_SIZE') {\n        setErrorMsg(t('recordingsRecordManual:fileSizeTooBig'));\n      } if (err.errors[0] === 'ERROR.FILE_REQUIRED') {\n        setErrorMsg(t('recordingsRecordManual:fileRequired'));\n      } else {\n        setErrorMsg(t('recordingsRecordManual:fileDurationTooShort'));\n      }\n    });\n  }, [handleNext, t]);\n\n  // Effects\n  useEffect(() => {\n    scrollToTop();\n    setTitle(t('recordingsRecordManual:header'));\n    setSubtitle('');\n    setType('shapeUp');\n    setDoGoBack(() => handleDoBack);\n  }, [handleDoBack, setDoGoBack, setType, setSubtitle, setTitle, t]);\n\n  return (\n    <>\n      <MainContainer>\n        <Title>\n          {t('recordingsRecordManual:micError')}\n        </Title>\n        <CloudsSVG />\n        <Controller\n          control={control}\n          name=\"uploadedFile\"\n          render={({ name }) => (\n            <UploadContainer>\n              <UploadButton htmlFor=\"uploaded-file\" />\n              <ArrowUp />\n              <UploadInput\n                ref={inputUpload}\n                id=\"uploaded-file\"\n                type=\"file\"\n                name={name}\n                accept={mimeTypes}\n                onChange={e => handleUpload(e.currentTarget.files?.[0])}\n              />\n            </UploadContainer>\n          )}\n        />\n      </MainContainer>\n      <TextErrorContainer>\n        {errorMsg}\n      </TextErrorContainer>\n      {/* Bottom Buttons */}\n      {activeStep && (\n        <Portal>\n          <WizardButtons\n            invert\n            leftLabel={t('recordingsRecordManual:uploadFile')}\n            leftHandler={() => inputUpload.current?.click()}\n          />\n        </Portal>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(RecordManualUpload);\n"]},"metadata":{},"sourceType":"module"}