{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = require(\"react\");\n\nvar react_dom_1 = require(\"react-dom\");\n\nvar use_ssr_1 = __importDefault(require(\"use-ssr\"));\n\nexports.errorMessage1 = 'You must either add a `ref` to the element you are interacting with or pass an `event` to openPortal(e) or togglePortal(e).';\n\nfunction usePortal(_a) {\n  if (_a === void 0) {\n    _a = {};\n  }\n\n  var _b = _a.closeOnOutsideClick,\n      closeOnOutsideClick = _b === void 0 ? true : _b,\n      _c = _a.closeOnEsc,\n      closeOnEsc = _c === void 0 ? true : _c,\n      bindTo = _a.bindTo,\n      // attach the portal to this node in the DOM\n  _d = _a.isOpen,\n      // attach the portal to this node in the DOM\n  defaultIsOpen = _d === void 0 ? false : _d,\n      onOpen = _a.onOpen,\n      onClose = _a.onClose,\n      onPortalClick = _a.onPortalClick,\n      eventHandlers = __rest(_a, [\"closeOnOutsideClick\", \"closeOnEsc\", \"bindTo\", \"isOpen\", \"onOpen\", \"onClose\", \"onPortalClick\"]);\n\n  var _e = use_ssr_1.default(),\n      isServer = _e.isServer,\n      isBrowser = _e.isBrowser;\n\n  var _f = react_1.useState(defaultIsOpen),\n      isOpen = _f[0],\n      makeOpen = _f[1]; // we use this ref because `isOpen` is stale for handleOutsideMouseClick\n\n\n  var open = react_1.useRef(isOpen);\n  var setOpen = react_1.useCallback(function (v) {\n    // workaround to not have stale `isOpen` in the handleOutsideMouseClick\n    open.current = v;\n    makeOpen(v);\n  }, []);\n  var targetEl = react_1.useRef(); // this is the element you are clicking/hovering/whatever, to trigger opening the portal\n\n  var portal = react_1.useRef(isBrowser ? document.createElement('div') : null);\n  react_1.useEffect(function () {\n    if (isBrowser && !portal.current) portal.current = document.createElement('div');\n  }, [isBrowser, portal]);\n  var elToMountTo = react_1.useMemo(function () {\n    if (isServer) return;\n    return bindTo && react_dom_1.findDOMNode(bindTo) || document.body;\n  }, [isServer, bindTo]);\n\n  var createCustomEvent = function createCustomEvent(e) {\n    if (!e) return {\n      portal: portal,\n      targetEl: targetEl,\n      event: e\n    };\n    var event = e || {};\n    if (event.persist) event.persist();\n    event.portal = portal;\n    event.targetEl = targetEl;\n    event.event = e;\n    var currentTarget = e.currentTarget;\n    if (!targetEl.current && currentTarget && currentTarget !== document) targetEl.current = event.currentTarget;\n    return event;\n  }; // this should handle all eventHandlers like onClick, onMouseOver, etc. passed into the config\n\n\n  var customEventHandlers = Object.entries(eventHandlers).reduce(function (acc, _a) {\n    var handlerName = _a[0],\n        eventHandler = _a[1];\n\n    acc[handlerName] = function (event) {\n      if (isServer) return;\n      eventHandler(createCustomEvent(event));\n    };\n\n    return acc;\n  }, {});\n  var openPortal = react_1.useCallback(function (e) {\n    if (isServer) return;\n    var customEvent = createCustomEvent(e); // for some reason, when we don't have the event argument, there\n    // is a weird race condition. Would like to see if we can remove\n    // setTimeout, but for now this works\n\n    if (targetEl.current == null) {\n      setTimeout(function () {\n        return setOpen(true);\n      }, 0);\n      throw Error(exports.errorMessage1);\n    }\n\n    if (onOpen) onOpen(customEvent);\n    setOpen(true);\n  }, [isServer, portal, setOpen, targetEl, onOpen]);\n  var closePortal = react_1.useCallback(function (e) {\n    if (isServer) return;\n    var customEvent = createCustomEvent(e);\n    if (onClose && open.current) onClose(customEvent);\n    if (open.current) setOpen(false);\n  }, [isServer, onClose, setOpen]);\n  var togglePortal = react_1.useCallback(function (e) {\n    return open.current ? closePortal(e) : openPortal(e);\n  }, [closePortal, openPortal]);\n  var handleKeydown = react_1.useCallback(function (e) {\n    return e.key === 'Escape' && closeOnEsc ? closePortal(e) : undefined;\n  }, [closeOnEsc, closePortal]);\n  var handleOutsideMouseClick = react_1.useCallback(function (e) {\n    var containsTarget = function containsTarget(target) {\n      return target.current.contains(e.target);\n    };\n\n    if (containsTarget(portal) || e.button !== 0 || !open.current || containsTarget(targetEl)) return;\n    if (closeOnOutsideClick) closePortal(e);\n  }, [isServer, closePortal, closeOnOutsideClick, portal]);\n  var handleMouseDown = react_1.useCallback(function (e) {\n    if (isServer || !(portal.current instanceof HTMLElement)) return;\n    var customEvent = createCustomEvent(e);\n    if (portal.current.contains(customEvent.target) && onPortalClick) onPortalClick(customEvent);\n    handleOutsideMouseClick(e);\n  }, [handleOutsideMouseClick]); // used to remove the event listeners on unmount\n\n  var eventListeners = react_1.useRef({});\n  react_1.useEffect(function () {\n    if (isServer) return;\n    if (!(elToMountTo instanceof HTMLElement) || !(portal.current instanceof HTMLElement)) return; // TODO: eventually will need to figure out a better solution for this.\n    // Surely we can find a way to map onScroll/onWheel -> scroll/wheel better,\n    // but for all other event handlers. For now this works.\n\n    var eventHandlerMap = {\n      onScroll: 'scroll',\n      onWheel: 'wheel'\n    };\n    var node = portal.current;\n    elToMountTo.appendChild(portal.current); // handles all special case handlers. Currently only onScroll and onWheel\n\n    Object.entries(eventHandlerMap).forEach(function (_a) {\n      var handlerName = _a[0]\n      /* onScroll */\n      ,\n          eventListenerName = _a[1]\n      /* scroll */\n      ;\n      if (!eventHandlers[handlerName]) return;\n\n      eventListeners.current[handlerName] = function (e) {\n        return eventHandlers[handlerName](createCustomEvent(e));\n      };\n\n      document.addEventListener(eventListenerName, eventListeners.current[handlerName]);\n    });\n    document.addEventListener('keydown', handleKeydown);\n    document.addEventListener('mousedown', handleMouseDown);\n    return function () {\n      // handles all special case handlers. Currently only onScroll and onWheel\n      Object.entries(eventHandlerMap).forEach(function (_a) {\n        var handlerName = _a[0],\n            eventListenerName = _a[1];\n        if (!eventHandlers[handlerName]) return;\n        document.removeEventListener(eventListenerName, eventListeners.current[handlerName]);\n        delete eventListeners.current[handlerName];\n      });\n      document.removeEventListener('keydown', handleKeydown);\n      document.removeEventListener('mousedown', handleMouseDown);\n      elToMountTo.removeChild(node);\n    };\n  }, [isServer, handleOutsideMouseClick, handleKeydown, elToMountTo, portal]);\n  var Portal = react_1.useCallback(function (_a) {\n    var children = _a.children;\n    if (portal.current != null) return react_dom_1.createPortal(children, portal.current);\n    return null;\n  }, [portal]);\n  return Object.assign([openPortal, closePortal, open.current, Portal, togglePortal, targetEl, portal], __assign(__assign({\n    isOpen: open.current,\n    openPortal: openPortal,\n    ref: targetEl,\n    closePortal: closePortal,\n    togglePortal: togglePortal,\n    Portal: Portal,\n    portalRef: portal\n  }, customEventHandlers), {\n    bind: __assign({\n      ref: targetEl\n    }, customEventHandlers)\n  }));\n}\n\nexports.default = usePortal;","map":null,"metadata":{},"sourceType":"script"}