import { jsx, css } from '@emotion/react';
import { useMemo, useRef, useEffect, cloneElement, Children, createElement, useState, useCallback } from 'react';
import t from 'prop-types';
import { Switch } from 'react-router-dom';
import { TransitionGroup, CSSTransition } from 'react-transition-group';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  display: grid;\n  .item {\n    grid-area: 1 / 1 / 2 / 2;\n  }\n  .item:not(:only-child) {\n    &.", "-enter-active, &.", "-exit-active {\n      transition: transform ", "ms ", ";\n    }\n  }\n\n  &.slide {\n    overflow: hidden;\n\n    // back\n    .back-enter {\n      transform: translateX(-100%);\n    }\n    .back-enter-active {\n      transform: translateX(0);\n    }\n    .back-exit {\n      transform: translateX(0);\n    }\n    .back-exit-active {\n      transform: translate(100%);\n    }\n\n    // next\n    .next-enter {\n      transform: translateX(100%);\n    }\n    .next-enter-active {\n      transform: translateX(0);\n    }\n    .next-exit {\n      transform: translateX(0);\n    }\n    .next-exit-active {\n      transform: translateX(-100%);\n    }\n  }\n  &.rotate {\n    perspective: 2000px;\n\n    .item {\n      backface-visibility: hidden;\n    }\n\n    // back\n    .back-enter {\n      transform: rotateY(-180deg);\n    }\n    .back-enter-active {\n      transform: rotateY(0);\n    }\n    .back-exit {\n      transform: rotateY(0);\n    }\n    .back-exit-active {\n      transform: rotateY(180deg);\n    }\n\n    // next\n    .next-enter {\n      transform: rotateY(180deg);\n    }\n    .next-enter-active {\n      transform: rotateY(0);\n    }\n    .next-exit {\n      transform: rotateY(0);\n    }\n    .next-exit-active {\n      transform: rotateY(-180deg);\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
/**
 * save
 */

var save = function save(key, init) {
  var getRaw = function getRaw() {
    return sessionStorage.getItem(key);
  };

  var set = function set(val) {
    return sessionStorage.setItem(key, JSON.stringify(val));
  };

  var remove = function remove() {
    return sessionStorage.removeItem(key);
  };

  if (init !== undefined && getRaw() === null) set(init);

  var getVal = function getVal() {
    return JSON.parse(getRaw());
  };

  var setVal = function setVal(val) {
    return val === undefined ? remove() : set(val);
  };

  return [getVal, setVal];
};
/**
 * useSave
 */


var useSave = function useSave(key, initVal) {
  var initRef = useRef(initVal);

  var _useMemo = useMemo(function () {
    return save(key, initRef.current);
  }, [key]),
      getVal = _useMemo[0],
      setVal = _useMemo[1];

  var _useState = useState(getVal()),
      state = _useState[0],
      setState = _useState[1];

  var set = useCallback(function (val) {
    setVal(val);
    setState(val);
  }, [setVal]);
  return [state, set];
};
/**
 * styles
 */


var getCSS = function getCSS(duration, timing, direction) {
  return css(_templateObject(), direction, direction, duration, timing);
};
/**
 * SlideRoutes
 */


var SlideRoutes = function SlideRoutes(_ref) {
  var location = _ref.location,
      animation = _ref.animation,
      pathList = _ref.pathList,
      duration = _ref.duration,
      timing = _ref.timing,
      destroy = _ref.destroy,
      children = _ref.children;

  var _useSave = useSave('::slide::history::', []),
      historyList = _useSave[0],
      setHistoryList = _useSave[1];

  var hasPathList = useMemo(function () {
    var has = (pathList == null ? void 0 : pathList.length) > 0;
    if (has && historyList) setHistoryList(undefined);
    return has;
  }, [historyList, pathList, setHistoryList]);
  var pathname = location.pathname;
  var prevPath = useRef(hasPathList ? pathname : historyList == null ? void 0 : historyList[0]);
  var move = useRef('');

  if (prevPath.current !== pathname) {
    if (hasPathList) {
      var prevIndex = pathList.indexOf(prevPath.current);
      var nextIndex = pathList.indexOf(pathname);

      if (nextIndex > prevIndex) {
        move.current = 'next';
      } else {
        move.current = 'back';
      }
    } else {
      var _nextIndex = historyList.lastIndexOf(pathname);

      if (_nextIndex === -1) {
        move.current = 'next';
        historyList.push(pathname);
      } else {
        move.current = 'back';
        historyList.length = _nextIndex + 1;
      }

      setHistoryList([].concat(historyList));
    }

    prevPath.current = pathname;
  }

  useEffect(function () {
    return function () {
      setHistoryList(undefined);
    };
  }, [setHistoryList]);
  var direction = move.current;
  var CSSProps = destroy ? {
    timeout: duration
  } : {
    addEndListener: function addEndListener() {}
  };
  return jsx(TransitionGroup, {
    className: "slide-routes " + animation,
    childFactory: function childFactory(child) {
      return /*#__PURE__*/cloneElement(child, {
        classNames: direction
      });
    },
    css: getCSS(duration, timing, direction)
  }, jsx(CSSTransition, Object.assign({
    key: pathname
  }, CSSProps), jsx(Switch, {
    location: location
  }, Children.map(children, function (child) {
    if (!child) return child;

    var _child$props = child.props,
        render = _child$props.render,
        component = _child$props.component,
        restProps = _objectWithoutPropertiesLoose(_child$props, ["render", "component"]);

    var element = render ? render() : /*#__PURE__*/createElement(component);
    if (element.props.replace === true) return child;

    var newRender = function newRender() {
      return jsx("div", {
        className: "item"
      }, element);
    };

    return _extends({}, child, {
      props: _extends({}, restProps, {
        render: newRender
      })
    });
  }))));
};

SlideRoutes.defaultProps = {
  animation: 'slide',
  duration: 200,
  timing: 'ease',
  destroy: true
};
SlideRoutes.propTypes = {
  location: t.object.isRequired,
  animation: t.oneOf(['slide', 'rotate']),
  pathList: t.array,
  duration: t.number,
  timing: t.oneOf(['ease', 'ease-in', 'ease-out', 'ease-in-out', 'linear']),
  destroy: t.bool,
  children: t.node
};

export default SlideRoutes;
